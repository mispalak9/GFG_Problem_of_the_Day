import random

class Solution:
    def kthSmallest(self, arr, k):
        return self.quickselect(arr, 0, len(arr) - 1, k - 1)
    
    def quickselect(self, arr, low, high, k):
        if low == high:
            return arr[low]
        
        pivot_index = self.partition(arr, low, high)
        
        if pivot_index == k:
            return arr[pivot_index]
        elif pivot_index > k:
            return self.quickselect(arr, low, pivot_index - 1, k)
        else:
            return self.quickselect(arr, pivot_index + 1, high, k)
    
    def partition(self, arr, low, high):
        pivot_index = random.randint(low, high)
        pivot_value = arr[pivot_index]
        
        # Move pivot to end
        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]
        
        # Partitioning process
        store_index = low
        for i in range(low, high):
            if arr[i] < pivot_value:
                arr[i], arr[store_index] = arr[store_index], arr[i]
                store_index += 1
        
        # Move pivot to its final place
        arr[store_index], arr[high] = arr[high], arr[store_index]
        
        return store_index
