from collections import defaultdict, deque
from typing import List

class Solution:
    def findOrder(self, alien_dict: List[str], N: int, K: int) -> str:
        # Step 1: Create a graph
        graph = defaultdict(list)
        indegree = [0] * K  # In-degree of each node
        
        # Step 2: Build the graph
        for i in range(N - 1):
            word1, word2 = alien_dict[i], alien_dict[i + 1]
            min_length = min(len(word1), len(word2))
            for j in range(min_length):
                if word1[j] != word2[j]:
                    graph[ord(word1[j]) - ord('a')].append(ord(word2[j]) - ord('a'))
                    indegree[ord(word2[j]) - ord('a')] += 1
                    break
        
        # Step 3: Topological Sort using Kahn's Algorithm (BFS)
        queue = deque()
        for i in range(K):
            if indegree[i] == 0:
                queue.append(i)
        
        topo_order = []
        while queue:
            node = queue.popleft()
            topo_order.append(chr(node + ord('a')))
            for neighbor in graph[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
        
        # If all characters are included in topo_order, return it as a string
        if len(topo_order) == K:
            return ''.join(topo_order)
        else:
            return ""  # This shouldn't happen in a valid input as per problem constraints

# Example usage:
# sol = Solution()
# print(sol.findOrder(["baa", "abcd", "abca", "cab", "cad"], 5, 4))  # Example Output: "bdac"
