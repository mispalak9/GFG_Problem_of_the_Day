from typing import List
import heapq

class Solution:
    def maxTip(self, n : int, x : int, y : int, arr : List[int], brr : List[int]) -> int:
        pq = []
        for i in range(n):
            heapq.heappush(pq, (-abs(arr[i] - brr[i]), i))
        
        total_tip = 0
        while pq:
            diff, i = heapq.heappop(pq)
            if arr[i] > brr[i] and x > 0 or y == 0:
                total_tip += arr[i]
                x -= 1
            else:
                total_tip += brr[i]
                y -= 1
        return total_tip
        



#{ 
 # Driver Code Starts
class IntArray:

    def __init__(self) -> None:
        pass

    def Input(self, n):
        arr = [int(i) for i in input().strip().split()]  #array input
        return arr

    def Print(self, arr):
        for i in arr:
            print(i, end=" ")
        print()


if __name__ == "__main__":
    t = int(input())
    for _ in range(t):

        n = int(input())

        x = int(input())

        y = int(input())

        arr = IntArray().Input(n)

        brr = IntArray().Input(n)

        obj = Solution()
        res = obj.maxTip(n, x, y, arr, brr)

        print(res)

# } Driver Code Ends
